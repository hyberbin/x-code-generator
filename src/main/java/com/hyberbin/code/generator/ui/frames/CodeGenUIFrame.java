/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.hyberbin.code.generator.ui.frames;


import com.google.inject.Inject;
import com.hyberbin.code.generator.config.CodeGeneratorModule;
import com.hyberbin.code.generator.config.ConfigFactory;
import com.hyberbin.code.generator.dao.IDGenerator;
import com.hyberbin.code.generator.dao.SqliteDao;
import com.hyberbin.code.generator.domains.Constants;
import com.hyberbin.code.generator.domains.TreeNodeModel;
import com.hyberbin.code.generator.domains.VersionDo;
import com.hyberbin.code.generator.log.FrameAppender;
import com.hyberbin.code.generator.ui.component.CheckBoxTreeCellRenderer;
import com.hyberbin.code.generator.ui.component.CheckBoxTreeNode;
import com.hyberbin.code.generator.ui.component.CheckBoxTreeNodeSelectionListener;
import com.hyberbin.code.generator.ui.model.PathTreeBind;
import com.hyberbin.code.generator.utils.CopyContext;
import com.hyberbin.code.generator.utils.DownloadUtils;
import com.hyberbin.code.generator.utils.ModelUtils;
import org.apache.commons.collections.CollectionUtils;
import org.fife.ui.rsyntaxtextarea.RSyntaxTextArea;
import org.fife.ui.rsyntaxtextarea.SyntaxConstants;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.swing.*;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreePath;
import javax.swing.tree.TreeSelectionModel;
import java.awt.*;
import java.io.File;
import java.util.List;
import java.util.*;
import java.util.concurrent.FutureTask;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.TimeoutException;
import java.util.function.Predicate;

/**
 * @author admin
 */
public class CodeGenUIFrame extends javax.swing.JFrame {

  private static final Logger logger = LoggerFactory.getLogger(CodeGenUIFrame.class);
  private DefaultMutableTreeNode ROOT = null;
  private SqliteDao sqliteDao;
  private javax.swing.JScrollPane jScrollPane1 = new javax.swing.JScrollPane();
  private javax.swing.JTree jTree1 = new javax.swing.JTree();

  /**
   * Creates new form CoderQueenUIFrame
   */
  @Inject
  public CodeGenUIFrame(SqliteDao sqliteDao) {
    this.sqliteDao = sqliteDao;
    initComponents();
    setIconImage(new ImageIcon(getClass().getResource("/icons/logo.png")).getImage());
    Toolkit toolkit = Toolkit.getDefaultToolkit();
    int x = (int) (toolkit.getScreenSize().getWidth() - getWidth()) / 2;
    int y = (int) (toolkit.getScreenSize().getHeight() - getHeight()) / 2;
    setLocation(x, y);
    javax.swing.tree.DefaultMutableTreeNode treeNode1 = new CheckBoxTreeNode("根目录");
    jTree1.setRowHeight(25);
    jTree1.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
    jTree1.addMouseListener(new CheckBoxTreeNodeSelectionListener(mouseEvent -> {
      jTree1MousePressed(mouseEvent);
      return null;
    }));
    jTree1.setCellRenderer(new CheckBoxTreeCellRenderer());
    jTree1.addTreeSelectionListener(evt -> jTree1ValueChanged(evt));
    jScrollPane1.setViewportView(jTree1);
    jSplitPane1.setLeftComponent(jScrollPane1);
    jTree1.getSelectionModel().setSelectionMode(TreeSelectionModel.SINGLE_TREE_SELECTION);
    getRSyntaxTextArea(templateTextArea).setCodeFoldingEnabled(true);
    getRSyntaxTextArea(templateTextArea).setSyntaxEditingStyle(
        SyntaxConstants.SYNTAX_STYLE_JAVA);
    getRSyntaxTextArea(templateTextArea).setSyntaxEditingStyle(SyntaxConstants.SYNTAX_STYLE_JAVA);
    pathName.putClientProperty("terminateEditOnFocusLost", Boolean.TRUE);
    fileName.putClientProperty("terminateEditOnFocusLost", Boolean.TRUE);
    templateTextArea.putClientProperty("terminateEditOnFocusLost", Boolean.TRUE);
      FrameAppender.setLog((RSyntaxTextArea)jTextArea1);
    loadAllTemplate();
    setVisible(true);
      checkUpdate(true);
  }

  private RSyntaxTextArea getRSyntaxTextArea(JTextArea textArea) {
    return (RSyntaxTextArea) textArea;
  }

  /**
   * This method is called from within the constructor to initialize the form. WARNING: Do NOT
   * modify this code. The content of this method is always regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        treeMenu = new javax.swing.JPopupMenu();
        addFileMenuItem = new javax.swing.JMenuItem();
        addDirMenuItem1 = new javax.swing.JMenuItem();
        delMenuItem = new javax.swing.JMenuItem();
        copyMenuItem = new javax.swing.JMenuItem();
        pasteMenuItem = new javax.swing.JMenuItem();
        jSplitPane2 = new javax.swing.JSplitPane();
        jSplitPane1 = new javax.swing.JSplitPane();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        pathName = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        fileName = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        templateTextArea = new org.fife.ui.rsyntaxtextarea.RSyntaxTextArea();
        saveButton = new javax.swing.JButton();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTextArea1 = new org.fife.ui.rsyntaxtextarea.RSyntaxTextArea();
        jTextPane1 = new javax.swing.JTextPane();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu2 = new javax.swing.JMenu();
        jMenu3 = new javax.swing.JMenu();
        selectTableMenuItem = new javax.swing.JMenuItem();
        jMenu1 = new javax.swing.JMenu();

        addFileMenuItem.setText("添加文件");
        addFileMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addFileMenuItemActionPerformed(evt);
            }
        });
        treeMenu.add(addFileMenuItem);

        addDirMenuItem1.setText("添加目录");
        addDirMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addDirMenuItem1ActionPerformed(evt);
            }
        });
        treeMenu.add(addDirMenuItem1);

        delMenuItem.setText("删除节点");
        delMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                delMenuItemActionPerformed(evt);
            }
        });
        treeMenu.add(delMenuItem);

        copyMenuItem.setText("复制节点");
        copyMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                copyMenuItemActionPerformed(evt);
            }
        });
        treeMenu.add(copyMenuItem);

        pasteMenuItem.setText("粘贴节点");
        pasteMenuItem.setEnabled(false);
        pasteMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pasteMenuItemActionPerformed(evt);
            }
        });
        treeMenu.add(pasteMenuItem);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jSplitPane2.setDividerLocation(400);
        jSplitPane2.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);

        jSplitPane1.setDividerLocation(150);
        jSplitPane1.setDividerSize(3);

        jLabel1.setText("目录名");

        pathName.setEnabled(false);
        pathName.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                pathNameFocusLost(evt);
            }
        });

        jLabel2.setText("文件名");

        fileName.setEnabled(false);
        fileName.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                fileNameFocusLost(evt);
            }
        });

        templateTextArea.setColumns(20);
        templateTextArea.setRows(5);
        templateTextArea.setEnabled(false);
        templateTextArea.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                templateTextAreaFocusLost(evt);
            }
        });
        jScrollPane2.setViewportView(templateTextArea);

        saveButton.setText("保存");
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addComponent(pathName))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(18, 18, 18)
                        .addComponent(fileName, javax.swing.GroupLayout.DEFAULT_SIZE, 824, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(saveButton, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(pathName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(fileName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(saveButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 313, Short.MAX_VALUE))
        );

        jSplitPane1.setRightComponent(jPanel2);

        jSplitPane2.setLeftComponent(jSplitPane1);

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane3.setViewportView(jTextArea1);

        jTabbedPane1.addTab("日志", jScrollPane3);

        jSplitPane2.setRightComponent(jTabbedPane1);

        jTextPane1.setEditable(false);
        jTextPane1.setText("这里是提示消息");
        jTextPane1.setEnabled(false);
        jTextPane1.setFocusable(false);

        jMenu2.setText("设置");
        jMenu2.setToolTipText("设置");
        jMenu2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jMenu2MousePressed(evt);
            }
        });
        jMenu2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenu2ActionPerformed(evt);
            }
        });
        jMenuBar1.add(jMenu2);

        jMenu3.setText("生成");
        jMenu3.setToolTipText("设置");
        jMenu3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jMenu3MousePressed(evt);
            }
        });
        jMenu3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenu3ActionPerformed(evt);
            }
        });

        selectTableMenuItem.setText("选择表");
        selectTableMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectTableMenuItemActionPerformed(evt);
            }
        });
        jMenu3.add(selectTableMenuItem);

        jMenuBar1.add(jMenu3);

        jMenu1.setText("更新");
        jMenu1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jMenu1MousePressed(evt);
            }
        });
        jMenu1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenu1ActionPerformed(evt);
            }
        });
        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane2, javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jTextPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1155, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jSplitPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 579, Short.MAX_VALUE)
                .addGap(26, 26, 26))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                    .addContainerGap(581, Short.MAX_VALUE)
                    .addComponent(jTextPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents


  private void jComboBox2ActionPerformed(
      java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox2ActionPerformed
    // TODO add your handling code here:
  }//GEN-LAST:event_jComboBox2ActionPerformed

  private void selectTreeNode(PathTreeBind pathTreeBind) {
    TreeNodeModel treeNodeModel = pathTreeBind.getModel();
    pathName.setText(treeNodeModel.getPathName());
    pathName.setEnabled(true);
    fileName.setEnabled(true);
    fileName.setText(treeNodeModel.getFileName());
    if(Constants.NODE_TYPE_DIR.equals(treeNodeModel.getType())){
      templateTextArea.setText("");
      templateTextArea.setEnabled(false);
    }else if(Constants.NODE_TYPE_FILE.equals(treeNodeModel.getType())){
      templateTextArea.setText(treeNodeModel.getTemplate());
      templateTextArea.setEnabled(true);
    }
  }

  private void jTree1ValueChanged(
      javax.swing.event.TreeSelectionEvent evt) {//GEN-FIRST:event_jTree1ValueChanged
    DefaultMutableTreeNode node = (DefaultMutableTreeNode) jTree1.getLastSelectedPathComponent();
    if (node == null) {
      return;
    }
    Object userObject = node.getUserObject();
    if (userObject instanceof PathTreeBind) {
      PathTreeBind pathTreeBind = ((PathTreeBind) userObject);
      selectTreeNode(pathTreeBind);
    }else {
      fileName.setText("");
      fileName.setEnabled(false);
      pathName.setText("");
      pathName.setEnabled(false);
      templateTextArea.setText("");
      templateTextArea.setEnabled(false);
    }

  }//GEN-LAST:event_jTree1ValueChanged


  private void jTree1MousePressed(java.awt.event.MouseEvent e) {//GEN-FIRST:event_jTree1MousePressed
    if (e.getButton() == 3) {
      TreePath path = jTree1.getPathForLocation(e.getX(), e.getY()); // 关键是这个方法的使用
      if (path == null) {  //JTree上没有任何项被选中
        return;
      }
      jTree1.setSelectionPath(path);
      treeMenu.show(jTree1, e.getX(), e.getY());
      DefaultMutableTreeNode component = (DefaultMutableTreeNode) path.getLastPathComponent();
      if(component.isRoot()){
        delMenuItem.setEnabled(false);
        addDirMenuItem1.setEnabled(true);
        addFileMenuItem.setEnabled(true);
      }else if (component.getUserObject() instanceof PathTreeBind) {
        PathTreeBind treeBind=(PathTreeBind)component.getUserObject();
        delMenuItem.setEnabled(true);
        if(Constants.NODE_TYPE_FILE.equals(treeBind.getModel().getType())){
          addDirMenuItem1.setEnabled(false);
          addFileMenuItem.setEnabled(false);
        }else if(Constants.NODE_TYPE_DIR.equals(treeBind.getModel().getType())){
          addDirMenuItem1.setEnabled(true);
          addFileMenuItem.setEnabled(true);
        }
      }
    }
  }//GEN-LAST:event_jTree1MousePressed

  private void jMenu2ActionPerformed(
      java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenu2ActionPerformed
    CodeGeneratorModule.getInstance(ConfigFrame.class).setVisible(true);
  }//GEN-LAST:event_jMenu2ActionPerformed

  private void jMenu2MousePressed(
      java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu2MousePressed
    CodeGeneratorModule.getInstance(ConfigFrame.class).setVisible(true);
  }//GEN-LAST:event_jMenu2MousePressed

    private void jMenu3MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu3MousePressed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenu3MousePressed

    private void jMenu3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenu3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenu3ActionPerformed

    private void addFileMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addFileMenuItemActionPerformed
      addNode(false);
    }//GEN-LAST:event_addFileMenuItemActionPerformed

    private void delMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_delMenuItemActionPerformed
      DefaultMutableTreeNode node = (DefaultMutableTreeNode) jTree1.getLastSelectedPathComponent();
      deleteNode(node);
      jTree1.updateUI();
    }//GEN-LAST:event_delMenuItemActionPerformed

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
      DefaultMutableTreeNode node = (DefaultMutableTreeNode) jTree1.getLastSelectedPathComponent();
      DefaultMutableTreeNode parent =(DefaultMutableTreeNode)  node.getParent();
      PathTreeBind treeBind= (PathTreeBind)node.getUserObject();
      TreeNodeModel model = treeBind.getModel();
      model.setFileName(fileName.getText());
      model.setPathName(pathName.getText());
      model.setTemplate(templateTextArea.getText());
      model.setProject(pathName.getText());
      if(parent.isRoot()){
        childrenFilter(node,n->{
            PathTreeBind childTreeBind= (PathTreeBind)n.getUserObject();
            TreeNodeModel childModel = childTreeBind.getModel();
            childModel.setProject(pathName.getText());
            return true;
        });
      }
      sqliteDao.saveDO(model);
    }//GEN-LAST:event_saveButtonActionPerformed

    private void addDirMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addDirMenuItem1ActionPerformed
      addNode(true);
    }//GEN-LAST:event_addDirMenuItem1ActionPerformed

    private void selectTableMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectTableMenuItemActionPerformed
        CodeGeneratorModule.getInstance(SelectTableFrame.class).setVisible(true);
    }//GEN-LAST:event_selectTableMenuItemActionPerformed

    private void pathNameFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_pathNameFocusLost
        saveButtonActionPerformed(null);
    }//GEN-LAST:event_pathNameFocusLost

    private void fileNameFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_fileNameFocusLost
        saveButtonActionPerformed(null);
    }//GEN-LAST:event_fileNameFocusLost

    private void templateTextAreaFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_templateTextAreaFocusLost
        saveButtonActionPerformed(null);
    }//GEN-LAST:event_templateTextAreaFocusLost

    private void copyMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_copyMenuItemActionPerformed
        DefaultMutableTreeNode source = (DefaultMutableTreeNode) jTree1.getLastSelectedPathComponent();
        CopyContext.copy(source);
        pasteMenuItem.setEnabled(true);
        
    }//GEN-LAST:event_copyMenuItemActionPerformed

    private void pasteMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pasteMenuItemActionPerformed
        DefaultMutableTreeNode dist = (DefaultMutableTreeNode) jTree1.getLastSelectedPathComponent();
      DefaultMutableTreeNode paste = CopyContext.paste();
        pasteMenuItem.setEnabled(false);
        if(paste!=null){
            copyNode(paste,dist);
            jTree1.updateUI();
        }
    }//GEN-LAST:event_pasteMenuItemActionPerformed

    private void jMenu1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenu1ActionPerformed
        checkUpdate(false);
    }//GEN-LAST:event_jMenu1ActionPerformed

    private void jMenu1MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu1MousePressed
         checkUpdate(false);
    }//GEN-LAST:event_jMenu1MousePressed


  private void addNode(boolean isDir){
    DefaultMutableTreeNode parent = (DefaultMutableTreeNode) jTree1.getLastSelectedPathComponent();
    DefaultMutableTreeNode child=new CheckBoxTreeNode();
    pathName.setText(isDir?"新建目录":"新建文件");
    fileName.setText(isDir?"/新建目录":"新建文件");
    templateTextArea.setText("");
    templateTextArea.setEnabled(!isDir);
    TreeNodeModel treeNodeModel = new TreeNodeModel();
    treeNodeModel.setPathName(pathName.getText());
    treeNodeModel.setFileName(fileName.getText());
    treeNodeModel.setType(isDir?Constants.NODE_TYPE_DIR:Constants.NODE_TYPE_FILE);
    PathTreeBind bind=new PathTreeBind(treeNodeModel,child,parent);
    if(parent.isRoot()){
      treeNodeModel.setParentId("0");
    }else {
      PathTreeBind parentBind= (PathTreeBind)parent.getUserObject();
      treeNodeModel.setParentId(parentBind.getModel().getId());
    }
    child.setUserObject(bind);
    parent.add(child);
    TreePath parentPath = jTree1.getSelectionPath();
    jTree1.expandPath(parentPath);
    jTree1.setSelectionPath(parentPath.pathByAddingChild(child));
    saveButtonActionPerformed(null);
    jTree1.updateUI();
  }


    public DefaultMutableTreeNode getSelectedProject() {
        DefaultMutableTreeNode node = (DefaultMutableTreeNode) jTree1.getLastSelectedPathComponent();
        if (node == null) {
            JOptionPane.showMessageDialog(this, "当前没有打开的项目", "提示", JOptionPane.ERROR_MESSAGE);
            return null;
        }
        while (node.getParent() != ROOT) {
            node = (DefaultMutableTreeNode) node.getParent();
        }
        return node;
    }
    /**
     * 加载所有模板文件
     */
  private void loadAllTemplate() {
    List<TreeNodeModel> all = sqliteDao.getAll(TreeNodeModel.class);
    Map<String,TreeNodeModel> idMap=new HashMap();
    Map<String,List<TreeNodeModel>> parentMap=new HashMap();
    for(TreeNodeModel treeNodeModel:all){
      idMap.put(treeNodeModel.getId(),treeNodeModel);
    }
    for(TreeNodeModel treeNodeModel:all){
      List<TreeNodeModel> treeNodeModels = parentMap.get(treeNodeModel.getParentId());
      if(treeNodeModels==null){
        treeNodeModels=new ArrayList<>();
        parentMap.put(treeNodeModel.getParentId(),treeNodeModels);
      }
      treeNodeModels.add(treeNodeModel);
    }

    DefaultTreeModel model = (DefaultTreeModel) jTree1.getModel();
    DefaultMutableTreeNode root = (DefaultMutableTreeNode) model.getRoot();
    ROOT = root;
    if (!root.toString().equals("根目录")) {
      root = new CheckBoxTreeNode("根目录");
      ROOT = root;
      model.setRoot(root);
    }
    addNode(ROOT,"0",parentMap);
  }

    /**
     * 添加一个节点
     * @param node
     * @param nodeId
     * @param parentMap
     */
  private void addNode(DefaultMutableTreeNode node, String nodeId,
      Map<String, List<TreeNodeModel>> parentMap) {
    List<TreeNodeModel> treeNodeModels = parentMap.get(nodeId);
    if (treeNodeModels != null) {
      for (TreeNodeModel model : treeNodeModels) {
        CheckBoxTreeNode child = new CheckBoxTreeNode();
        PathTreeBind pathTreeBind = new PathTreeBind(model, child,node);
        child.setUserObject(pathTreeBind);
        node.add(child);
        if(node==ROOT){
            model.setProject(model.getPathName());
        }else {
            PathTreeBind parent=(PathTreeBind)node.getUserObject();
            model.setProject(parent.getModel().getProject());
        }
        addNode(child, model.getId(), parentMap);
      }
    }
  }

    /**
     * 复制模板或者文件夹
     * @param sourceNode
     * @param distNode
     */
  private void copyNode(DefaultMutableTreeNode sourceNode,DefaultMutableTreeNode distNode){
      PathTreeBind bind = (PathTreeBind)sourceNode.getUserObject();
      TreeNodeModel copy = ModelUtils.copy(bind.getModel());
      copy.setId(IDGenerator.SNOW_FLAKE_STRING.generate());
      if(ROOT==distNode){
          copy.setParentId("0");
      }else {
          copy.setParentId((((PathTreeBind)distNode.getUserObject()).getModel().getId()));
      }
      CheckBoxTreeNode child = new CheckBoxTreeNode();
      PathTreeBind pathTreeBind = new PathTreeBind(copy, child,distNode);
      child.setUserObject(pathTreeBind);
      distNode.add(child);
      sqliteDao.insertDO(copy);
      int childCount = sourceNode.getChildCount();
      for(int i=0;i<childCount;i++){
          DefaultMutableTreeNode childNode = (DefaultMutableTreeNode)sourceNode.getChildAt(i);
          copyNode(childNode,child);
      }
  }

    /**
     * 获取所有选中的模板节点
     * @return
     */
    public List<PathTreeBind> getAllSelectedNodes() {
        List<PathTreeBind> list = new ArrayList<>();
        childrenFilter(ROOT, n -> {
            PathTreeBind bind = (PathTreeBind) n.getUserObject();
            CheckBoxTreeNode checkBoxTreeNode = (CheckBoxTreeNode) n;
            TreeNodeModel model = bind.getModel();
            if (checkBoxTreeNode.getParent() == ROOT) {
                model.setProject(model.getPathName());
            } else {
                PathTreeBind parent = (PathTreeBind) n.getUserObject();
                model.setProject(parent.getModel().getProject());
            }
            if (checkBoxTreeNode.isSelected()) {
                list.add(bind);
            }
            return checkBoxTreeNode.isSelected();
        });
        return list;
    }

    /**
     * 获取当前项目中所有节点
     * @return
     */
    public List<PathTreeBind> getAllProjectNodes() {
        DefaultMutableTreeNode node = getSelectedProject();
        if(node==null){
            return null;
        }
        List<PathTreeBind> list = new ArrayList<>();
        childrenFilter(node, n -> {
            PathTreeBind bind = (PathTreeBind) n.getUserObject();
            CheckBoxTreeNode checkBoxTreeNode = (CheckBoxTreeNode) n;
            TreeNodeModel model = bind.getModel();
            if (checkBoxTreeNode.getParent() == ROOT) {
                model.setProject(model.getPathName());
            } else {
                PathTreeBind parent = (PathTreeBind) n.getUserObject();
                model.setProject(parent.getModel().getProject());
            }
            list.add(bind);
            return true;
        });
        return list;
    }



    private void childrenFilter(DefaultMutableTreeNode node,
            Predicate<DefaultMutableTreeNode> filter) {
        for (int i = 0; i < node.getChildCount(); i++) {
            DefaultMutableTreeNode child = (DefaultMutableTreeNode) node.getChildAt(i);
            if (filter.test(child)||!child.isLeaf()) {
                childrenFilter(child, filter);
            }
        }
    }

    /**
     * 删除模板文件或者文件夹
     * @param node
     */
  private void deleteNode(DefaultMutableTreeNode node){
      while(node.getChildCount()>0){
          DefaultMutableTreeNode childNode = (DefaultMutableTreeNode)node.getChildAt(0);
          deleteNode(childNode);
      }
      PathTreeBind treeBind= (PathTreeBind)node.getUserObject();
      sqliteDao.deleteOne(TreeNodeModel.class,"id",treeBind.getModel().getId());
      treeBind.getParent().remove(node);
  }

    /**
     * 检查更新
     * @param auto 是否自动触发
     */
    private void checkUpdate(boolean auto) {
        try {
            VersionDo versionDo = sqliteDao.getAll(VersionDo.class).get(0);
            boolean update = !Objects.equals(versionDo.getVersion(), ConfigFactory.getCurrentVersion());
            if (!update) {
                if (!auto) {
                    JOptionPane.showMessageDialog(this, "当前已经是最新版本", "提示", JOptionPane.INFORMATION_MESSAGE);
                }
                return;
            }
            int option = JOptionPane.showConfirmDialog(this, "有新的版本，是否更新?", "更新提示", JOptionPane.YES_NO_OPTION);
            FutureTask task = new FutureTask(() -> {
                if (Objects.equals(JOptionPane.YES_OPTION, option)) {
                    try {
                        String oldVersionFile = DownloadUtils.downloadNewVersion(versionDo.getHttpPath(), versionDo.getLocalPath());
                        Runtime.getRuntime().exec("java -jar "+versionDo.getLocalPath() +" \""+oldVersionFile+"\"");
                        System.exit(0);
                    } catch (Throwable e) {
                        logger.info("更新出错", e);
                        JOptionPane.showMessageDialog(null, "更新出错\n\r" + e.getMessage(), "错误", JOptionPane.ERROR_MESSAGE);
                    }
                }
                return null;
            });
            new Thread(task).start();

            task.get(10, TimeUnit.SECONDS);
        } catch (TimeoutException e) {
            logger.info("更新超时");
        } catch (Throwable e) {
            logger.info("更新出错", e);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem addDirMenuItem1;
    private javax.swing.JMenuItem addFileMenuItem;
    private javax.swing.JMenuItem copyMenuItem;
    private javax.swing.JMenuItem delMenuItem;
    private javax.swing.JTextField fileName;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JSplitPane jSplitPane2;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextPane jTextPane1;
    private javax.swing.JMenuItem pasteMenuItem;
    private javax.swing.JTextField pathName;
    private javax.swing.JButton saveButton;
    private javax.swing.JMenuItem selectTableMenuItem;
    private javax.swing.JTextArea templateTextArea;
    private javax.swing.JPopupMenu treeMenu;
    // End of variables declaration//GEN-END:variables
}
